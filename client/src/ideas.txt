
    
    // // 1. Create new socket using IPv4 and TCP/IP
    // if ((socket_desc = socket(AF_INET, SOCK_STREAM, 0)) == -1)
    // {
    //     printf("Could not create socket\n");
    //     return 1;
    // }

    // // 2. Define server values: address family, address and port
    // server.sin_family = AF_INET;
    // server.sin_port = htons(PORT);
    // server.sin_addr.s_addr = inet_addr(SERVER_IP);

    // // 3. Connect socket to server
    // if (connect(socket_desc, (struct sockaddr*) &server, sizeof(server)) < 0)
    // {
    //     printf("Could not connect to server\n");
    //     return 1;
    // }

    // printf("Connected\n");


    // read()

    // write()

    // close()



    // do
    // {
    //     login_status = login(username, password);
    // } while (login_status == false);

    // printf("Type your query followed by a backspace (%d characters max.)\n", BUFFER_SIZE);
    // printf("Type q to quit\n");

    // do 
    // {
    //     switch (choice)
    //     {
    //     case SELECT:
    //         select();
    //         break;
    //     case INSERT:
    //         insert();
    //         break;
    //     case JOIN:
    //         join();
    //         break;
    //     case QUIT:
    //         break;
    //     default:
    //         break;
    //     }
    // }
    // while(choice != QUIT);

    
    printf("Please login to continue\n");
    printf("Username: ");
    fgets(username, USERNAME_BUFFER_SIZE, stdin);
    username[strlen(username) - 1] = '\0';
    
    printf("Password: ");
    fgets(password, PASSWORD_BUFFER_SIZE, stdin);
    password[strlen(password) - 1] = '\0';

    char* message = malloc(strlen(username) + strlen(password) + 2);
    strcpy(message, username);
    strcat(message, ",");
    strcat(message, password);

    printf("|%s|\n", message);
    free(message);

    // printf("Username: ");
    // fgets(username, USERNAME_BUFFER_SIZE, stdin);
    // username[strlen(username) - 1] = '\0';
    
    // printf("Password: ");
    // fgets(password, PASSWORD_BUFFER_SIZE, stdin);
    // password[strlen(password) - 1] = '\0';

    // // printf("|%s|\n", username);
    // // printf("|%s|\n", password);

    
    
    // // Message to server that includes username and password separated by a comma
    // char* message = malloc(strlen(username) + strlen(password) + 2);
    // strcpy(message, username);
    // strcat(message, ",");
    // strcat(message, password);

    // // printf("|%s|\n", message);

    // if (send(socket_desc, message, strlen(message), 0) < 0)
    //     return ERROR_REQUEST_NOT_SENT;

    // if (recv(socket_desc, login_reply, SERVER_REPLY_SIZE, 0) < 0)
    //     return ERROR_REPLY_NOT_RECEIVED;

    // if (strcmp(login_reply, "failure") == 0)
    //     return ERROR_LOGIN_USER_NOT_FOUND;
    // else if (strcmp(login_reply, "success") == 0)
    //     return OK_LOGIN;

    // return ERROR_LOGIN_OTHER;


// // Copy substring until newline

    // // Copy reply to temporary buffer to avoid reference issues after call to strtok()
    // char* copy = malloc(strlen(reply) + 1);
    // strcpy(copy, reply);

    // // Initialize token parsing
    // token = strtok(copy, delim_col);
    // if (token == NULL)
    //     printf("NULL\n");
    // else
    // {
    //     printf("%s\t", token);
    //     printf("Here 2\n");
    // }

    // // Read subsequent data
    // while(token != NULL)
    // {
    //     token = strtok(NULL, delim_col);
    //     printf("%s\t", token);
    // }

    // free(copy);



    // Initialize token parsing
    //row = strtok(copy, delim_row);
    // if ((row = strtok(copy, delim_row)) == NULL)
    //     printf("NULL\n");
    // else
    // {
    //     printf("|%s|\n", row);
    // }

    // // Read subsequent data
    // while((row = strtok(NULL, delim_row)) != NULL)
    // {
    //     //row = strtok(NULL, delim_row);
    //     printf("|%s|\n", row);
    // }



    do
        {
            fgets(input_buffer, INPUT_BUFFER_SIZE, stdin);
            // Replace newline at the end with termination character
            input_buffer[strlen(input_buffer) - 1] = '\0';

            // Append non-empty values to request
            if (input_buffer[0] != '\0')
            {
                strcat(request_buffer, ",");
                strcat(request_buffer, input_buffer);
                strcat(statement, input_buffer);
                strcat(statement, ", ");
            }
            
        } while (input_buffer[0] != '\0');
        
        // Final statement formating
        statement[strlen(statement) - 2] = ')';
        statement[strlen(statement) - 1] = ';';